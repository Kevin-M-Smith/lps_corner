/* 
Complement to LPS Interpreter

Copyright (c) 2016, Imperial College, London
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

%%% LOAD THIS FILE to start LPS

%% This module acts as a data placeholder: LPS programs will be loaded over it
%% All LPS engine state persists here

:- module(db, [
	lps_goal_id_counter/1,
	action/1,
	current_goal/1,
	current_time/1,
	lps_updating_current_state/0,
	d_pre/1,
	depth/1,
	event/1,
	expanded_consequent/2,
	failed/3,
	fluent/1,
	happens/3,
	initial_state/1,
	(initiated)/3,
	l_events/2,
	l_int/2,
	l_timeless/2,
	observe/2,
	option/1,
	reactive_rule/2,
	reactive_rule/3,
	state/1,
	steps/1,
	succ_t/2,
	(terminated)/3,
	tried/3,
	used/1,
	lps_test_options/1,
	lps_test_result_item/3,
	lps_test_result/3,
	lps_failed_test/2,
	my_load_dyn/2
]).

:- dynamic lps_goal_id_counter/1.
:- dynamic action/1.
:- dynamic current_goal/1.
:- dynamic current_time/1.
:- dynamic lps_updating_current_state/0.
:- dynamic d_pre/1.
:- dynamic depth/1.
:- dynamic event/1.
:- dynamic expanded_consequent/2.
:- dynamic failed/3.
:- dynamic fluent/1.
:- dynamic happens/3.
:- dynamic initial_state/1.
:- dynamic (initiated)/3.
:- dynamic l_events/2. 
:- dynamic l_int/2.
:- dynamic l_timeless/2.
:- dynamic observe/2.
:- dynamic option/1.
:- dynamic reactive_rule/2.
:- dynamic reactive_rule/3. % adds priority
:- dynamic state/1.
:- dynamic steps/1.
:- dynamic succ_t/2.
:- dynamic (terminated)/3.
:- dynamic tried/3.
:- dynamic used/1.
:- dynamic lps_test_result_item/3.
:- dynamic lps_test_result/3.
:- dynamic lps_failed_test/2.
:- dynamic lps_test_options/1.

:- if(current_prolog_flag(dialect, xsb)).

my_load_dyn(F,_) :- load_dyn(F).

:- endif.

:- if(current_prolog_flag(dialect, swi)).

% TODO: somehow runing tests a second time still originates "Clauses of interpreter:terminated/3 , etc. are not together..."
% It may be necessary to inject these declarations in the Wei syntax file...
:- discontiguous( ((initiated) /3, (terminated)/3, l_events/2, reactive_rule/3, reactive_rule/2, l_int/2, l_timeless/2,
	action/1, fluent/1, event/1, d_pre/1, happens/3 )).

my_load_dyn(F,WithWarnings) :- 
	(style_check('?'(singleton))->Old=true;Old=false),
	(WithWarnings==true -> style_check('+'(singleton)) ; style_check('-'(singleton))),
	load_files([F],[module(user)]),
	(Old==true -> style_check('+'(singleton)) ; style_check('-'(singleton))).
	
:- endif.




