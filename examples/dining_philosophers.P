initial_state([
	available(fork(0)),
	available(fork(1)),
	available(fork(2)),
	available(fork(3)),
	available(fork(4))
]).

reactive_rule(
	[happens(time_to_eat(philosopher(N)), T1, T2)],
	[happens(dine(philosopher(N)), T3, T4), tc(T2 =< T3)]
).

l_timeless(adjacent(fork(1), philosopher(1), fork(2)), []).
l_timeless(adjacent(fork(3), philosopher(3), fork(4)), []).
l_timeless(adjacent(fork(0), philosopher(0), fork(1)), []).
l_timeless(adjacent(fork(2), philosopher(2), fork(3)), []).
l_timeless(adjacent(fork(4), philosopher(4), fork(0)), []).

l_events(
	happens(dine(philosopher(N)), T1, T6),
	[
		happens(think(philosopher(N)), T1, T2),
		adjacent(F1, philosopher(N), F2),
		happens(pickup_forks(F1, philosopher(N), F2), T3, T4),
		tc(T2 =< T3),
		happens(eat(philosopher(N)), T4, T5),
		happens(putdown_forks(F1, philosopher(N), F2), T5, T6)
	]
).

terminated(happens(pickup_forks(F1, philosopher(N), F2), T1, T2), available(F1), []).
terminated(happens(pickup_forks(F1, philosopher(N), F2), T1, T2), available(F2), []).
initiated(happens(putdown_forks(F1, philosopher(N), F2), T1, T2), available(F1), []).
initiated(happens(putdown_forks(F1, philosopher(N), F2), T1, T2), available(F2), []).

d_pre([happens(pickup_forks(F1, philosopher(N), F2), T1, T2),
	holds(not(available(F1)), T2)]).
d_pre([happens(pickup_forks(F1, philosopher(N), F2), T1, T2),
	holds(not(available(F2)), T2)]).

d_pre([happens(pickup_forks(F1, philosopher(N), F), T1, T2),
	happens(pickup_forks(F, philosopher(K), F2), T1, T2)]).

observe(
	[
		time_to_eat(philosopher(0)),
		time_to_eat(philosopher(1)),
		time_to_eat(philosopher(2)),
		time_to_eat(philosopher(3)),
		time_to_eat(philosopher(4))
	],
	1
).

observe([], 2).
observe([], 3).
observe([], 4).
observe([], 5).
observe([], 6).

fluent(available(_)).
event(time_to_eat(_)).
action(think(_)).
action(pickup_forks(_,_,_)).
action(eat(_)).
action(putdown_forks(_,_,_)).